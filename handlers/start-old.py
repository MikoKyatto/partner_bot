"""
Start command and registration flow handlers
"""
import logging
import os
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from utils.database import save_user, get_user, is_user_approved
from utils.sheets import add_partnercode
from keyboards.admin import get_admin_keyboard

logger = logging.getLogger(__name__)

def get_admin_group_id() -> str:
    """Get admin group ID from environment"""
    return os.getenv('ADMIN_GROUP_ID', '-1003016595712')

# FSM States
class Register(StatesGroup):
    phone = State()
    name = State()

router = Router()

def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """Get the main menu keyboard for approved users"""
    keyboard = [
        [KeyboardButton(text="–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

@router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    """Handle /start command"""
    try:
        user_id = message.from_user.id
        
        # Check if user is admin
        from handlers.admin import is_admin
        if is_admin(user_id):
            await message.answer(
                "üëë Welcome, Administrator!\n\n"
                "You have access to administrative functions.\n"
                "Use the buttons below or commands:\n\n"
                "/admin - Admin panel for user approvals\n"
                "/stats - System statistics\n"
                "/users - List approved users\n"
                "/health - System health check\n\n"
                "Note: Admins do not receive referral codes.",
                reply_markup=get_admin_keyboard()
            )
            return
        
        # Check if user already exists
        user = get_user(user_id)
        
        if user:
            if user['approved']:
                # User is approved, show main menu
                await message.answer(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É Lethai! üèùÔ∏è\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                # User exists but not approved
                await message.answer(
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."
                )
        else:
            # New user, start registration
            await message.answer(
                "üèùÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É Lethai!\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            await state.set_state(Register.phone)
            
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@router.message(Register.phone, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    """Process contact sharing"""
    try:
        contact = message.contact
        
        # Validate contact
        if not contact.phone_number:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return
        
        # Store phone number
        await state.update_data(phone=contact.phone_number)
        
        # Ask for name
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Register.name)
        
    except Exception as e:
        logger.error(f"Error processing contact: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(Register.phone)
async def invalid_contact(message: types.Message, state: FSMContext):
    """Handle invalid contact input"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

@router.message(Register.name)
async def process_name(message: types.Message, state: FSMContext):
    """Process name input and complete registration"""
    try:
        name = message.text.strip()
        
        # Validate name
        if not name or len(name) < 2:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):"
            )
            return
        
        if len(name) > 50:
            await message.answer(
                "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:"
            )
            return
        
        # Get phone from state
        data = await state.get_data()
        phone = data.get('phone')
        
        if not phone:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            await state.clear()
            return
        
        # Save user to database
        user_id = message.from_user.id
        success = save_user(user_id, name, phone, approved=False)
        
        if success:
            # Notify admin group
            try:
                await message.bot.send_message(
                    chat_id=get_admin_group_id(),
                    text=f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:\n\n"
                         f"üë§ ID: {user_id}\n"
                         f"üìù –ò–º—è: {name}\n"
                         f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
                )
            except Exception as e:
                logger.error(f"Error sending notification to admin group: {e}")
            
            # Confirm registration to user
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing name: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(F.text == "–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def show_referral_link(message: types.Message):
    """Show user's referral link and QR code"""
    try:
        user_id = message.from_user.id
        
        # Check if user is admin - admins don't have referral codes
        from handlers.admin import is_admin
        if is_admin(user_id):
            await message.answer(
                "‚ö†Ô∏è Administrators do not have referral codes.\n"
                "This feature is only for regular users."
            )
            return
        
        # Check if user is approved
        if not is_user_approved(user_id):
            await message.answer(
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
            )
            return
        
        # Generate referral link
        from utils.qr_code import get_referral_link, generate_qr_code_bytes
        
        referral_link = get_referral_link(str(user_id))
        
        # Generate QR code
        qr_bytes = generate_qr_code_bytes(str(user_id))
        
        if qr_bytes:
            # Send QR code image with caption
            await message.answer_photo(
                photo=types.BufferedInputFile(qr_bytes, filename="qr_code.jpg"),
                caption=f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{referral_link}\n\n"
                       f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéÅ"
            )
        else:
            # Fallback to text only
            await message.answer(
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{referral_link}\n\n"
                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéÅ"
            )
            
    except Exception as e:
        logger.error(f"Error showing referral link: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    """Show user's balance"""
    try:
        user_id = message.from_user.id
        
        # Check if user is admin - admins don't have balance
        from handlers.admin import is_admin
        if is_admin(user_id):
            await message.answer(
                "‚ö†Ô∏è Administrators do not have a balance.\n"
                "This feature is only for regular users."
            )
            return
        
        # Check if user is approved
        if not is_user_approved(user_id):
            await message.answer(
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
            )
            return
        
        # Get balance from Google Sheets
        from utils.sheets import get_balance
        
        balance = get_balance(str(user_id))
        
        # Create inline keyboard for withdrawal
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å",
                    url=f"https://t.me/LakeevaaaThai?start=withdraw_{user_id}"
                )]
            ]
        )
        
        await message.answer(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n\n"
            f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing balance: {e}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: types.Message):
    """Show support information"""
    await message.answer(
        "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Lethai\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
        "@LakeevaaaThai\n\n"
        "–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ! üí¨"
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats_button(message: types.Message):
    """Handle admin statistics button"""
    from handlers.admin import is_admin
    if not is_admin(message.from_user.id):
        return
    # Redirect to stats command
    from handlers.admin import admin_stats
    await admin_stats(message)

@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_users_button(message: types.Message):
    """Handle admin users list button"""
    from handlers.admin import is_admin
    if not is_admin(message.from_user.id):
        return
    # Redirect to users command
    from handlers.admin import list_users
    await list_users(message)

@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: types.Message):
    """Handle admin panel button"""
    from handlers.admin import is_admin
    if not is_admin(message.from_user.id):
        return
    # Redirect to admin command
    from handlers.admin import admin_panel
    await admin_panel(message)

@router.message(F.text == "üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
async def health_check_button(message: types.Message):
    """Handle health check button"""
    from handlers.admin import is_admin
    if not is_admin(message.from_user.id):
        return
    # Redirect to health command
    from handlers.admin import health_check
    await health_check(message)

@router.message(F.text & ~F.text.startswith('/'))
async def handle_other_messages(message: types.Message, state: FSMContext):
    """Handle other messages (excluding commands)"""
    current_state = await state.get_state()
    
    if current_state:
        # User is in registration flow
        if current_state == Register.phone:
            await invalid_contact(message, state)
        elif current_state == Register.name:
            await process_name(message, state)
    else:
        # User is not in any state, show help
        user_id = message.from_user.id
        user = get_user(user_id)
        
        if user and user['approved']:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
