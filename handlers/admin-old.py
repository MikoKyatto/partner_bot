"""
Admin commands and interface for approving/rejecting users
"""
import logging
import os
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from utils.database import get_pending_users, update_user_approval, get_user, get_approved_users
from utils.sheets import add_partnercode
from health import HealthChecker

logger = logging.getLogger(__name__)

router = Router()

def get_admin_user_id() -> int:
    """Get admin user ID from environment"""
    return int(os.getenv('ADMIN_USER_ID', '1454702347'))

def get_admin_group_id() -> str:
    """Get admin group ID from environment"""
    return os.getenv('ADMIN_GROUP_ID', '-1003016595712')

def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    admin_user_id = get_admin_user_id()
    logger.info(f"Checking admin status for user {user_id}, admin ID is {admin_user_id}")
    is_admin_result = user_id == admin_user_id
    logger.info(f"User {user_id} admin status: {is_admin_result}")
    return is_admin_result

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    """Show admin panel"""
    try:
        user_id = message.from_user.id
        logger.info(f"üîß ADMIN COMMAND CALLED by user {user_id}")
        logger.info(f"Message text: {message.text}")
        logger.info(f"Message type: {type(message.text)}")
        
        if not is_admin(user_id):
            logger.warning(f"User {user_id} tried to access admin panel but is not admin")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        logger.info(f"‚úÖ User {user_id} is admin, showing admin panel")
        
        # Get pending users
        pending_users = get_pending_users()
        
        if not pending_users:
            await message.answer(
                "üë• –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
                "üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            return
        
        # Show pending users
        text = "üë• –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
        
        for i, user in enumerate(pending_users[:10], 1):  # Limit to 10 users
            text += f"{i}. ID: {user['telegram_id']}\n"
            text += f"   –ò–º—è: {user['name']}\n"
            text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
            text += f"   –î–∞—Ç–∞: {user['created_at']}\n\n"
        
        if len(pending_users) > 10:
            text += f"... –∏ –µ—â–µ {len(pending_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # Create inline keyboard for each pending user
        keyboard_buttons = []
        for user in pending_users[:5]:  # Limit to 5 buttons
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ {user['name']} ({user['telegram_id']})",
                    callback_data=f"approve_{user['telegram_id']}"
                ),
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{user['telegram_id']}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin panel: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.callback_query(F.data.startswith("approve_"))
async def approve_user(callback: CallbackQuery):
    """Approve a user"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        
        # Extract user ID from callback data
        user_id = int(callback.data.split("_")[1])
        
        # Get user info
        user = get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        if user['approved']:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω.", show_alert=True)
            return
        
        # Update user approval status
        success = update_user_approval(user_id, True)
        
        if success:
            # Add partnercode to Google Sheets with full user data
            sheets_success = add_partnercode(
                partnercode=str(user_id),
                name=user['name'],
                contact=user['phone'],
                username=callback.from_user.username,
                referral_source=None  # Can be extended later if referral tracking is added
            )
            
            if sheets_success:
                # Notify user
                try:
                    await callback.bot.send_message(
                        chat_id=user_id,
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É Lethai.\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é."
                    )
                except Exception as e:
                    logger.error(f"Error notifying user {user_id}: {e}")
                
                # Notify admin group
                try:
                    await callback.bot.send_message(
                        chat_id=get_admin_group_id(),
                        text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω:\n\n"
                             f"üë§ ID: {user_id}\n"
                             f"üìù –ò–º—è: {user['name']}\n"
                             f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                             f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://taplink.cc/lakeevainfo?ref={user_id}"
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin group: {e}")
                
                await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)
                
                # Update the message
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} (ID: {user_id}) –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                    f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://taplink.cc/lakeevainfo?ref={user_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets.", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error approving user: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

@router.callback_query(F.data.startswith("reject_"))
async def reject_user(callback: CallbackQuery):
    """Reject a user"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        
        # Extract user ID from callback data
        user_id = int(callback.data.split("_")[1])
        
        # Get user info
        user = get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # Notify user
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                     "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @LakeevaaaThai"
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")
        
        # Notify admin group
        try:
            await callback.bot.send_message(
                chat_id=get_admin_group_id(),
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n\n"
                     f"üë§ ID: {user_id}\n"
                     f"üìù –ò–º—è: {user['name']}\n"
                     f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}"
            )
        except Exception as e:
            logger.error(f"Error notifying admin group: {e}")
        
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
        
        # Update the message
        await callback.message.edit_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} (ID: {user_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
        
    except Exception as e:
        logger.error(f"Error rejecting user: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

@router.message(Command("stats"))
async def admin_stats(message: types.Message):
    """Show admin statistics"""
    try:
        user_id = message.from_user.id
        logger.info(f"üìä STATS COMMAND CALLED by user {user_id}")
        
        if not is_admin(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # Get statistics
        pending_users = get_pending_users()
        approved_users = get_approved_users()
        
        # Get Google Sheets info
        from utils.sheets import get_worksheet_info, test_connection
        
        sheets_connected = test_connection()
        sheets_info = get_worksheet_info() if sheets_connected else {}
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n\n"
        text += f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(pending_users)}\n"
        text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(approved_users)}\n"
        text += f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(pending_users) + len(approved_users)}\n\n"
        
        if sheets_connected:
            text += f"üìã Google Sheets:\n"
            text += f"   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ‚úÖ\n"
            text += f"   ‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {sheets_info.get('partnercode_count', 'N/A')}\n"
            text += f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {sheets_info.get('row_count', 'N/A')}\n"
        else:
            text += f"üìã Google Sheets: ‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error in admin stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(Command("users"))
async def list_users(message: types.Message):
    """List all approved users"""
    try:
        user_id = message.from_user.id
        logger.info(f"üë• USERS COMMAND CALLED by user {user_id}")
        
        if not is_admin(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        approved_users = get_approved_users()
        
        if not approved_users:
            await message.answer("üìã –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        text = "üë• –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        
        for i, user in enumerate(approved_users[:20], 1):  # Limit to 20 users
            text += f"{i}. ID: {user['telegram_id']}\n"
            text += f"   –ò–º—è: {user['name']}\n"
            text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
            text += f"   –û–¥–æ–±—Ä–µ–Ω: {user['approved_at']}\n"
            text += f"   –°—Å—ã–ª–∫–∞: https://taplink.cc/lakeevainfo?ref={user['telegram_id']}\n\n"
        
        if len(approved_users) > 20:
            text += f"... –∏ –µ—â–µ {len(approved_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        # Split message if too long
        if len(text) > 4000:
            # Send in chunks
            chunks = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for chunk in chunks:
                await message.answer(chunk)
        else:
            await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error listing users: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(Command("health"))
async def health_check(message: types.Message):
    """Check bot system health"""
    try:
        user_id = message.from_user.id
        logger.info(f"üè• HEALTH COMMAND CALLED by user {user_id}")
        
        if not is_admin(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # Run health checks
        health = HealthChecker.run_all_checks()
        
        # Build status message
        status_icon = "‚úÖ" if health['status'] == 'healthy' else "‚ùå"
        text = f"üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {status_icon} {health['status'].upper()}\n\n"
        text += f"üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {health['summary']['healthy_checks']}/{health['summary']['total_checks']}\n\n"
        
        for check_name, check_result in health['checks'].items():
            check_icon = "‚úÖ" if check_result['status'] == 'healthy' else "‚ùå"
            check_title = check_name.replace('_', ' ').title()
            text += f"{check_icon} {check_title}:\n"
            text += f"   {check_result['message']}\n"
            
            if check_result['details']:
                for key, value in list(check_result['details'].items())[:3]:  # Limit to 3 details
                    text += f"   ‚Ä¢ {key}: {value}\n"
            text += "\n"
        
        text += f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health['timestamp']}"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error in health check: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.")
